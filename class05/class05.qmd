---
title: "Class 05: Data Visualization with GGPLOT"
author: "Madeleine Duquette"
format: pdf
toc: TRUE
---

# Our First Plot

R has base graphics

```{r, eval=FALSE} 
plot(cars)
```

How would I plot this with 'ggplot2'?

We need to install and load the ggplot2 package first.
To install any package in R we use the 'install.packages()' function.
To load the package 'library()'

```{r}
# install.packages("ggplot2")

library(ggplot2)
ggplot(cars)
```

Every ggplot needs at least 3 layers:
-**Data** (i.e. the data.frame)
-**Aes** (the aesthetic mapping of what we want to plot(data-->aesthetics))
-**Geoms** (how we want to plot it!)

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) + 
  geom_point() +
  geom_line()
```

Add another geom

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) + 
  geom_point() +
  geom_smooth(method = lm, se=FALSE) + 
  labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       subtitle = "Your informative subtitle text here",
       caption="Dataset: 'cars'") + 
  theme_bw()
```

**LAB ASSIGNMENT**
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2) + 
  geom_point()
```

```{r}
# How many genes in the data
Total_genes <- nrow(genes)
#Column names
colnames(genes)
# How many columns
ncol(genes)
#Find out how many 'up' regulated genes there are
table(genes$State)
#Fraction of upregulated genes?
round( table(genes$State)/Total_genes * 100, 2)
```

There are `r Total_genes` in the dataset

```{r}
p <- ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point()
```

```{r}
p + scale_color_manual(values = c("blue","gray","red")) + 
  labs(x = "Control (no drug)", y = "Drug Treatment", title = "Gene Expression Changes Upon Drug Treatment")
```

# Bonus Things


```{r}
#install.packages("gapminder")
library(gapminder)
#install.packages("dplyr")
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha = 0.4)

```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha = 0.4)
```

```{r}
ggplot(gapminder_2007) +
  geom_point(aes(x=gdpPercap, y=lifeExp, size=pop, color = continent), alpha = 0.5) +
  scale_size_area(max_size = 10)
  
```

Checking to see if there's a difference between passing aes into geom_point vs. having it as a separate function...

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, size=pop, color = continent) + 
geom_point(alpha = 0.5) +
  scale_size_area(max_size = 10)
  
```

# Repeat GapMinder for 1957

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp, size=pop, color = continent) + 
geom_point(alpha = 0.5) +
  scale_size_area(max_size = 10)
```

# Compare 1957 and 2007 Side-by-Side

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp, size=pop, color = continent) + 
geom_point(alpha = 0.5) +
  scale_size_area(max_size = 10) + 
  facet_wrap(~year)
```

```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```

# Various Representations of the Top 5
```{r}
ggplot(gapminder_top5) +
  geom_col(aes(x=country, y=pop, fill=continent))
```

```{r}
ggplot(gapminder_top5) +
  geom_col(aes(x=country, y=pop, fill=lifeExp))
```

# Reordering by Population
```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country,-pop), y=pop, fill=gdpPercap) + 
  geom_col()
```
Changing colors :)
```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country,-pop), y=pop, fill=country) + 
  geom_col(color="gray30") + 
  guides(fill="none")
```

# Flipping Bar Charts

```{r}
head(USArrests)
USArrests$State <- rownames(USArrests)
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_point() +
  geom_segment(aes(x=State, 
                   xend=State, 
                   y=0, 
                   yend=Murder), color="blue") +
  coord_flip()
```

```{r eval=FALSE}
#install.packages("gganimate")
library(gapminder)
library(gganimate)

# Setup nice regular ggplot of the gapminder data
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  # Facet by continent
  facet_wrap(~continent) +
  # Here comes the gganimate specific bits
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  shadow_wake(wake_length = 0.1, alpha = FALSE)

```


```{r}
library(patchwork)

# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```






